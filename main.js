/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GotoHeadingPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/utility.ts
function headingsForActiveFile(app) {
  let activeFile = app.workspace.getActiveFile();
  if (!activeFile)
    return void 0;
  const fileCache = app.metadataCache.getFileCache(activeFile);
  return fileCache == null ? void 0 : fileCache.headings;
}
function goAndScrollToLine(editor, line) {
  editor.setCursor(line);
  const position = editor.getCursor();
  const range = editor.wordAt(position);
  if (!range)
    return;
  editor.scrollIntoView(range, true);
}

// src/heading_modal.ts
var import_obsidian = require("obsidian");
var HeadingModal = class extends import_obsidian.FuzzySuggestModal {
  constructor() {
    super(...arguments);
    __publicField(this, "items", []);
    __publicField(this, "defaultItemIndex", -1);
    __publicField(this, "onChoose");
    __publicField(this, "settings");
  }
  onOpen() {
    super.onOpen();
    if (this.defaultItemIndex >= 0 && this.defaultItemIndex < this.items.length) {
      let chooser = this["chooser"];
      for (let i = 0; i < this.defaultItemIndex; i++) {
        chooser["moveDown"](new KeyboardEvent("keydown", { key: "ArrowDown" }));
      }
    }
  }
  getItems() {
    return this.items;
  }
  getItemText(item) {
    return item.heading;
  }
  onChooseItem(item, evt) {
    var _a;
    (_a = this.onChoose) == null ? void 0 : _a.call(this, item);
  }
  renderSuggestion(item, el) {
    const isSearching = this.inputEl.value.length > 0;
    const level = item.item.level;
    const iconName = level >= 1 && level <= 6 ? `heading-${level}` : "heading";
    el.classList.add("join-gotoheading-headingmodal-suggestion");
    if (this.settings.highlightCurrentHeading && this.defaultItemIndex >= 0 && this.items.indexOf(item.item) == this.defaultItemIndex) {
      el.classList.add("join-gotoheading-headingmodal-suggestion-default");
    }
    if (isSearching) {
      (0, import_obsidian.setIcon)(el, iconName);
    } else {
      el.createDiv({
        text: "#".repeat(level),
        cls: "join-gotoheading-headingmodal-suggestion-spacer"
      });
    }
    const titleEl = el.createSpan({ cls: "title" });
    super.renderSuggestion(item, titleEl);
    if (isSearching) {
      let smallEl = el.createEl("small", { text: this.parentHeadingString(item.item), cls: "path" });
    } else {
      let smallEl = el.createEl("small", { cls: "icon" });
      (0, import_obsidian.setIcon)(smallEl, iconName);
    }
  }
  parentHeadingString(item) {
    let string = "";
    while (item) {
      const parentIndex = this.items.findLastIndex(
        (heading) => heading.line < item.line && heading.level < item.level
      );
      if (parentIndex < 0)
        break;
      const parent = this.items[parentIndex];
      if (string.length > 0) {
        string = `${parent.heading} > ${string}`;
      } else {
        string = parent.heading;
      }
      item = parent;
    }
    return string;
  }
};

// src/settings_tab.ts
var import_obsidian2 = require("obsidian");
var GotoHeadingSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Highlight current heading").setDesc("Emphasize the current heading in the switcher").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.highlightCurrentHeading).onChange(async (value) => {
        this.plugin.settings.highlightCurrentHeading = toggle.getValue();
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  highlightCurrentHeading: true
};

// src/main.ts
var GotoHeadingPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new GotoHeadingSettingTab(this.app, this));
    this.addCommand({
      id: "join-gotoheading-previous",
      name: "Go To Heading: Previous Heading",
      editorCallback: (editor, view) => {
        this.goToRelativeHeading(editor, view, -1);
      }
    });
    this.addCommand({
      id: "join-gotoheading-next",
      name: "Go To Heading: Next Heading",
      editorCallback: (editor, view) => {
        this.goToRelativeHeading(editor, view, 1);
      }
    });
    this.addCommand({
      id: "join-gotoheading-switcher",
      name: "Go To Heading: Open Switcher",
      editorCallback: (editor, view) => {
        this.openHeadingSwitcher(editor, view);
      }
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  goToRelativeHeading(editor, view, offset) {
    if (offset == 0)
      return;
    const headings = headingsForActiveFile(this.app);
    if (!(headings == null ? void 0 : headings.length))
      return;
    const line = editor.getCursor().line;
    const nearestHeadingIndex = headings.findLastIndex((heading2) => heading2.position.start.line <= line);
    if (nearestHeadingIndex < 0)
      return;
    const nearestHeading = headings[nearestHeadingIndex];
    if (offset == -1 && line > nearestHeading.position.end.line) {
      offset = 0;
    }
    let idx = nearestHeadingIndex + offset;
    if (idx < 0 || idx >= headings.length)
      return;
    const heading = headings[idx];
    goAndScrollToLine(editor, heading.position.start.line);
  }
  openHeadingSwitcher(editor, view) {
    const headings = headingsForActiveFile(this.app);
    if (!(headings == null ? void 0 : headings.length))
      return;
    let modal = new HeadingModal(this.app);
    modal.setInstructions([
      { command: "\u2191\u2193", purpose: "to navigate" },
      { command: "\u21B5", purpose: "to jump to heading" },
      { command: "esc", purpose: "to dismiss" }
    ]);
    modal.setPlaceholder("Go to heading...");
    modal.items = headings.map((heading) => ({
      heading: heading.heading,
      level: heading.level,
      line: heading.position.start.line
    }));
    modal.onChoose = (item) => {
      goAndScrollToLine(editor, item.line);
      modal.close();
    };
    const line = editor.getCursor().line;
    modal.defaultItemIndex = headings.findLastIndex((heading) => heading.position.start.line <= line);
    modal.settings = this.settings;
    modal.open();
  }
};
